<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
  <channel>
    <title>Optimised Bogosort</title>
    <link>http://blog.optimisedbogosort.com</link>
    <description>Who needs quicksort anyway?</description>
    <lastBuildDate>Wed, 26 Jul 2017 00:00:00 GMT</lastBuildDate>
    
    <item>
      <title>Static Noise Updates</title>
      <link>http://blog.optimisedbogosort.com/articles/static_noise_updates.html</link>
      <description>&lt;p&gt; I&#039;ve made a few updates to my static site generator, &lt;a href=&quot;https://github.com/bogosortist/static-noise&quot;&gt;Static Noise&lt;/a&gt; including an RSS feed generator, as you can see by the addition of the new RSS feed in the navigation links above. Perhaps the most significant update I&#039;ve made to the code base is the addition of a cache to improve the build process. &lt;/p&gt;&lt;p&gt;As I have mentioned in a in my &lt;a href=&quot;/articles/static_noise.html&quot;&gt;initial write up on Static Noise&lt;/a&gt;, I wanted a way to cache rendered articles to help improve the speed and efficiency of building the build process. The problem was that I could not find a way to portably retrieve the file metadata, particularly the &quot;last modified&quot; time stamp. After doing a little research, I&#039;m embarrsed to say I completely overlooked the &lt;code&gt;file-write-date&lt;/code&gt; which does exactly that, and is a standard function to boot. &lt;/p&gt;&lt;p&gt;One thing I really like about Lisp is the idea that code is data and data is code. I mentioned how I use a simple s-expression as a method of configuration. Likewise, I decided to store my cache as a simple s-expression and using the &lt;code&gt;print&lt;/code&gt; function to write the cache to a file in the blog directory. When the blog is opened via the &lt;code&gt;open-blog&lt;/code&gt; function, it looks for a file, aptly named &quot;article-cache.lisp&quot;, then proceeds to load a p-list containing rendered article and a date corresponding to the last time they were rendered. Each entry is keyed by the file name of their source code e.g. &lt;code&gt;(:filename1 (:content &quot;foo&quot; :last-modified 1234) :filename2 (:content &quot;bar&quot; :last-modified 234))&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;lisp&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defun retrieve-cached-content (file-path cache)  
  &quot;Returns a string representing the content of the given file path and a boolean representing whether or not the cache needs to be resaved and, if need be, a new cache. The string value returned is the result of one of three outcomes, first the content is new that does not exist in the cache (which is added to the current cache as a side effect), the content file has been modified since the cached time in which the newly rendered content replaces the old content and the new content is returned, and finally the content exists and is up to date to which the cached content is returned. A possible side effect of this function is that the content and last modified time for the cached content specified by the file-path may be changed if invalidated&quot;  
  (let* ((current-modified-time (file-write-date file-path))  
         (cache-keyword (make-keyword (file-namestring file-path)))  
         (cache-entry (getf cache cache-keyword)))  
    (if (or (not cache-entry)  
            (&amp;gt; current-modified-time (getf cache-entry :last-modified)))  
        (let ((new-data `(:content ,(cadr (multiple-value-list (markdown file-path :stream nil))) :last-modified ,current-modified-time)))  
          (setf (getf cache cache-keyword) new-data)  
          (values (getf new-data :content)  
                  t  
                  cache))  
        (values (getf cache-entry :content)  
                nil)))) &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;Aside from creating the cache one, I needed a facility to retrieve the cached content and determine whether or not the cache should be marked as invalid. In order for the cache to be valid it must contain entries for all the files in the content folder and the modification date for each file must be the same as the last recorded render date. One I noted while implementing this function is that &lt;code&gt;setf&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; always modify the data structure it&#039;s given when adding a new item to a list. The only time it modifies the data structure in place is if a pair is found. For this reason, I pass back an updated cache when it is found to be invalid, so that which ever function is calling &lt;code&gt;retrieve-cached-content&lt;/code&gt; can set whatever reference it&#039;s using to the updated cache. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;lisp&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defun render-cached-content (render-function cache-file-name cache listing template blog-directory)  
  &quot;Render content that may be cached, return a cache which may have been updated, and save the new cache if it proven to be invalid as a side effect. The render-function is a function and the cache-file-name argument should be a string representing the file name that the cache will be written to.&quot;  
  (multiple-value-bind (cache should-write) (funcall render-function cache listing template blog-directory)  
    (when should-write  
      (with-open-file (cache-file (merge-pathnames-as-file blog-directory cache-file-name)  
                                  :direction :output  
                                  :if-exists :rename-and-delete  
                                  :if-does-not-exist :create)  
        (print cache cache-file))  
      cache))) &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;After modifying &lt;code&gt;render-articles&lt;/code&gt; to either retrieve cached content or to rerender the content completely, I modified it to return the cache and a boolean indicating wether or not the cache needs to be rewritten. Seeing that I plan to use caches for pages and blog entries, I decided to create a higher order function to wrap around the normal rendering functions and update the cache file, or write one if it doesn&#039;t already exist. &lt;/p&gt;&lt;p&gt;While I&#039;m pretty happy with the solution, I really want to find a way to use the data produced by the &lt;code&gt;create-article-listing&lt;/code&gt; and &lt;code&gt;create-page-listing&lt;/code&gt; functions as the data cache. I will return to the problem, as soon as I finish another project I have in the works. &lt;/p&gt;</description>
      <pubDate>Mon, 18 May 2015 00:00:00 GMT</pubDate>
      <category>common lisp</category>
    </item>
    
    <item>
      <title>Kuribo Shoe</title>
      <link>http://blog.optimisedbogosort.com/articles/kuribo_shoe.html</link>
      <description>&lt;p&gt; &lt;/p&gt;&lt;p&gt;I recently went to my local game store and saw they had a few Famicom games come in. Imports are pretty hard to come by, so whenever I see them around I try to pick them up since shipping usually costs 5 or 6 dollars, even more if it&#039;s a bundle of games. As I was picking games from the lot had a bit of a problem remembering which ones I already had. &lt;/p&gt;&lt;p&gt;To help me avoid picking up a fourth copy of Bomberman 2 I decided to create a simple web application called &lt;a href=&quot;https://github.com/bogosortist/kuriboshoe&quot;&gt;Kuriboshoe&lt;/a&gt;, named after one of my favorite items in Super Mario Bros. 3. I&#039;ve missed working with Common Lisp quite a bit. Unlike many popular programming languages today, however, Common Lisp doesn&#039;t seem to have a strong presence in the web arena. After doing a bit of research I found an interesting looking framework called &lt;a href=&quot;http://8arrow.org/caveman/&quot;&gt;Caveman 2&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;Caveman 2 is a web framework that is based on &lt;a href=&quot;http://8arrow.org/ningle/&quot;&gt;Ningle&lt;/a&gt; which in turn is based on &lt;a href=&quot;http://clacklisp.org/&quot;&gt;Clack&lt;/a&gt;, all of which were created by &lt;a href=&quot;http://8arrow.org/&quot;&gt;Eitarow Fukamachi&lt;/a&gt;. Caveman 2 is pretty light weight and easy to use. Compared to it&#039;s brethren, Caveman 2 is a framework that sits itself between Clack, which is a fairly generalized framework, and Ningle, which prides itself on being a microframework. Caveman 2 provides database integration with &lt;a href=&quot;https://github.com/fukamachi/datafly&quot;&gt;Datafly&lt;/a&gt;, and uses &lt;a href=&quot;https://github.com/mmontone/djula&quot;&gt;Djula&lt;/a&gt; for templating. Many systems Caveman 2 could be changed out with alternative libraries, such as the CL-SQL for the database library or CL-WHO for templating. For this project I decided to use all the defaults and also decided not to set up any models. &lt;/p&gt;&lt;p&gt;After starting a project with Caveman 2 you are given some project scaffolding and sets up a few things for you. The two files to focus on are the &lt;code&gt;config.lisp&lt;/code&gt; file and the &lt;code&gt;web.lisp&lt;/code&gt; file both located in the &lt;code&gt;src&lt;/code&gt; directory. Templates are kept in the &lt;code&gt;template&lt;/code&gt; directory and any static resources you may want to use in your project should go in the &lt;code&gt;static&lt;/code&gt; directory. By default, static files are served up by middleware provided by &lt;code&gt;Clack.Middleware.Static&lt;/code&gt;. I usually like to keep things I install via bower separate from my the javascript and css files I write. To add another another file to be served by the static middleware I simply had to add the folder in the static middleware&#039;s initarg located in the &lt;code&gt;app.lisp&lt;/code&gt; file in the root directory (note the &lt;code&gt;/libs/&lt;/code&gt; path in the ppcre:scan argument). &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;lisp&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;(builder  
 (unless (productionp)  
   (&amp;lt;clack-middleware-static&amp;gt;  
    :path (lambda (path)  
            (if (ppcre:scan &quot;^(?:/images/|/css/|/js/|/libs/|/robot\\.txt$|/favicon.ico$)&quot; path)  
                path  
                nil))  
              :root *static-directory*))  
            .... &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;The &lt;code&gt;productionp&lt;/code&gt; function is a predicate that determines whether or not the system is running in production mode (provided by &lt;code&gt;webappname.config&lt;/code&gt; package where webappname is the name of your web application). I put this in place because I left the static files to be served out by my web server, but I will talk about that more in a bit. Since we&#039;re on the topic of configuration, Caveman 2 utilizes &lt;a href=&quot;https://github.com/fukamachi/envy&quot;&gt;Envy&lt;/a&gt; for its configuration system. Defining a configuration is done in the &lt;code&gt;config.lisp&lt;/code&gt; file located in the &lt;code&gt;/src/&lt;/code&gt; directory. There&#039;s a &lt;code&gt;:common&lt;/code&gt; configuration which is merged with all of the other configurations defined below it. In order to switch environments, simply set the &lt;code&gt;APP_ENV&lt;/code&gt; environment variable to the name of the configuration you wish to use. For example if you were using SBCL on a unix system you could run &lt;code&gt;APP_ENV=development sbcl&lt;/code&gt; to use the development environment. To check if you&#039;re configuration has been read you can run the &lt;code&gt;webappname.config:config&lt;/code&gt; function and check the environment list that is currently being used. &lt;/p&gt;&lt;p&gt;Once configured the database I decided to create the admin interface as that is where most of the user interaction is happens. Routes can be added to the application in one of two ways. The first and perhaps easiest is to use the annotation syntax &lt;em&gt;i.e.&lt;/em&gt; &lt;code&gt;@defroute&lt;/code&gt; followed a function to handle the route. The second method of defining a route with the &lt;code&gt;defroute&lt;/code&gt; macro. I chose the latter because I accidentally started with Caveman 1 instead of Caveman 2. &lt;/p&gt;&lt;p&gt;When it came to authenticating users I wanted several layers of protection, including a lock out mechanism, if a user failed to log in a certain number of times (3 in my case) as well as a Recaptcha to prevent a flood of login attempts by bots. I first looked into using &lt;a href=&quot;https://github.com/bogosortist/cl-recaptcha&quot;&gt;cl-recaptcha&lt;/a&gt; however from what I recall, it didn&#039;t support the newest version of Recaptcha. As a result I decided to use &lt;a href=&quot;http://www.weitz.de/drakma/&quot;&gt;Drakma&lt;/a&gt; to make a post request to verify the Recapcha challenge response token. I plan to contribute a patch to cl-recaptcha soon. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;lisp&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defroute (&quot;/admin/verify&quot; :method :post) (&amp;amp;key |username| |password| |g-recaptcha-response|)  
  (let* ((stream (http-request &quot;https://www.google.com/recaptcha/api/siteverify&quot;  
                               :method :post  
                               :parameters `((&quot;secret&quot; . ,(config :secret-key))  
                                             (&quot;response&quot; . ,|g-recaptcha-response|))  
                               :want-stream t))  
         (google-response (progn (setf (flexi-stream-external-format stream) :utf-8)  
                                 (setf google-response (decode-json stream)))))  
    (if (cdr (assoc :success google-response))  
        (if (and (and (stringp |username|) (&amp;gt; (length |password|) 0))  
                 (and (stringp |username|) (&amp;gt; (length |password|) 0)))  
            (let ((validation-sql (make-string-output-stream))  
                  (sanitized-username (sanitize-string |password|))  
                  (sanitized-password (sanitize-string |password|))  
... &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;In order to integrate cl-recaptcha I added my &lt;code&gt;site-key&lt;/code&gt; and &lt;code&gt;secret-key&lt;/code&gt; in the &lt;code&gt;config.lisp&lt;/code&gt; file under the &lt;code&gt;:common&lt;/code&gt; configuration entry. The request is read into a &lt;a href=&quot;http://weitz.de/flexi-streams/&quot;&gt;flexi-stream&lt;/a&gt;, then decoded the stream and using &lt;code&gt;decode-json&lt;/code&gt; from the &lt;code&gt;:datafly&lt;/code&gt; package. Note that the recaptcha challenge response could be verified client side as well, via a callback once the captcha is complete. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;lisp&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt; (&amp;lt;clack-middleware-session&amp;gt;  
  :store (make-instance &#039;clack.session.store.dbi:&amp;lt;clack-session-store-dbi&amp;gt;  
                        :connect-args (gametracker.db:connection-settings)))  
 
... &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;Sessions were an important part of this project given the administrative functionality provided. By default sessions are kept in an in-memory sqlite database. I decided to use an RDBMS instead as I was never really sure about the ttl on the session entries. Using an RDBMS instead of sqlite is fairly simple. The first order of business is ensuring you have the &lt;code&gt;clack-session-store-dbi&lt;/code&gt; middleware listed as a dependency in your system definition file. Once that is in place you must instantiate the &lt;code&gt;clack-session-store-dbi&lt;/code&gt; and pass it to the &lt;code&gt;:store&lt;/code&gt; init arg in the &lt;code&gt;clack-middleware-session&lt;/code&gt; initialization. Finally your database must have a table named &quot;sessions&quot; structured as documented &lt;a href=&quot;http://quickdocs.org/clack/api#system-clack-session-store-dbi&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;lisp&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defun create-insert-statement (table-name user-input)  
  (insert-into table-name  
               (apply #&#039;set= user-input)))  
 
(defun create-update-statement (table-name user-input id)  
  (update table-name  
          (apply #&#039;set= user-input)  
          (where (:= :id id))))  
 
(defun create-delete-statement (table-name id)  
  (delete-from table-name  
    (where (:= :id id)))) &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;Handling the data and CRUD operations on the back end was quite simple with the help of the &lt;a href=&quot;https://github.com/fukamachi/sxql&quot;&gt;SXQL&lt;/a&gt; library. The functions that generate insert, update and deletion all take arguments that limit the range of values they operation much like normal SQL. For crud operations these usually devolve to &lt;code&gt;columnName&lt;/code&gt; = &lt;code&gt;someValue&lt;/code&gt; and the function that generates those kinds of expressions is the &lt;code&gt;set=&lt;/code&gt; function. By naming the form fields on the client side the same as the table columns they represented and using &lt;code&gt;apply&lt;/code&gt; on &lt;code&gt;set=&lt;/code&gt; I was able to create functions that took care of most of my database access needs. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;lisp&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defun sanitize-string (parameter)  
  (concatenate &#039;string (loop for char across parameter  
                          if (or (char= #\; char)  
                                 (char= #\&#039; char)  
                                 (char= #\&quot; char)  
                                 (char= #\` char))  
                          collect #\\ and collect char  
                          else collect char)))  
 
(defun sanitize-input (parameters)  
  (loop for parameter in parameters  
     collect (intern (string-upcase (sanitize-string (car parameter))) :keyword)  
     collect (let ((parameter-value (cdr parameter)))  
               (cond ((stringp parameter-value) (sanitize-string parameter-value))  
                     ((symbolp parameter-value) (if (eql :false parameter-value)  
                                                    0  
                                                    1))  
                     (t parameter-value))))) &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;While all strings are quoted by &lt;a href=&quot;https://github.com/fukamachi/sxql&quot;&gt;SXQL&lt;/a&gt; I always like to escape all special SQL characters just to be sure. &lt;/p&gt;&lt;p&gt;Since many of the operations manipulating the database had required parameters such as the game&#039;s or system&#039;s name I wrote a small function to check the fields were not left blank. Doing so would result in an error reporting malformed input. When I first started working on this project, boolean values were either &quot;t&quot; or the keyword symbol &quot;:false&quot; for true and false respectively. This changed after an update forcing me to cast boolean values as numbers (0 for false 1 for true) before accepting them. Leaving them out would trigger the &lt;code&gt;has-required-fields-p&lt;/code&gt; check to report an error. &lt;/p&gt;&lt;p&gt;In order to protect certain pages from unauthorized users I created a macro to wrap all of my administration route definitions to report an 304 error if anyone tried to access it prior to signing in. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;lisp&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defroute (&quot;/admin/company/&quot; :method :post) (&amp;amp;key _parsed)  
  (session-protected-route (:json)  
    (add-to-table :companies &#039;(&quot;name&quot; &quot;ismanufacturer&quot;) _parsed))) &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;With all of these nifty little features combined a majority of my route handling code was shortened to three or so lines. Im fairly certain things could&#039;ve been further simplified by setting up some models, but I will perhaps save that for a future update. &lt;/p&gt;&lt;p&gt;Djula, is a port of the &lt;a href=&quot;https://docs.djangoproject.com/en/1.8/topics/templates/&quot;&gt;Django templating&lt;/a&gt; library, which made me feel right at home as Django used to be my weapon of choice for web applications. One thing peculiar thing I had to do was bootstrap some data for use on the front end, the system, genre, and company for the various select dropdowns. To do this, I set up a few environment variables with data I had recieved from the database then parsed it in as a regular javascript array in the template code. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;lisp&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;(defun render-initial-page (template)  
  (let* ((initial-company-listing)  
         (initial-genre-listing)  
         (initial-systems-listing))  
    (with-connection (db)  
      (setf initial-company-listing (encode-json-custom (retrieve-all-from-table :companies)))  
      (setf initial-genre-listing (encode-json-custom (retrieve-all-from-table :genres)))  
      (setf initial-systems-listing (encode-json-custom (retrieve-all-from-table :systems))))  
    (render template (list :companies initial-company-listing  
                           :genres initial-genre-listing  
                           :systems initial-systems-listing)))) &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;A small note about the &lt;code&gt;encode-json-custom&lt;/code&gt; function. While I was deploying this application, Quicklisp downloaded a new version of Caveman 2 along with the &lt;a href=&quot;https://github.com/Rudolph-Miller/jonathan&quot;&gt;jonathan&lt;/a&gt; library which may mean the functions handling encoding and decoding may have changed. Prior to this, I ran across a bug when encoding a query result that returned a list of results containing a single item. This proved to be problematic when the client side expected an array of objects. As such I had created a function to guarantee that a result would always be an array (normally when receiving a result from &lt;code&gt;retrieve-all&lt;/code&gt;). I opened an issue on Github, and hope to hear back soon about the matter. &lt;/p&gt;&lt;p&gt;I decided to use &lt;a href=&quot;https://lhorie.github.io/mithril/&quot;&gt;Mithril&lt;/a&gt; on the front end once again. I&#039;ve previously used Mithril models as a simple container to represent their backend table counter parts. This time, however, I decided to add the responsibility of syncing their data to the back end making them much more useful. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;GameTrackerAdmin.Model = function(defaultEmptySet, backsideUrl) {  
    return function (initialValues) {  
        if (initialValues) {  
            this.attributes = (_.isEmpty(initialValues.id)) ? _.extend({id:null}, _.clone(initialValues,true)) : _.clone(initialValues);  
        } else {  
            this.attributes = defaultEmptySet;  
        }  
 
        this.backsideUrl = backsideUrl;  
 
        this.save = function() {  
            var self = this;  
            // For backend purposes  
            return m.request({method: &quot;POST&quot;,  
                              url: self.backsideUrl,  
                              data: _.omit(self.attributes, &quot;id&quot;)  
                             })  
                .then(function(response) {  
                    self.attributes.id = response.newid;  
                    return response;  
                });  
        };  
 
        this.update = function(newAttributes) {  
            var self = this;  
            _.forIn(newAttributes, function(value, key) {  
                self.attributes[key] = value;  
            });  
            return m.request({method: &quot;PUT&quot;,  
                              url: self.backsideUrl,  
                              data: self.attributes  
                             });  
        };  
 
        this.remove = function() {  
            var self = this;  
            return m.request({method: &quot;DELETE&quot;,  
                              url: self.backsideUrl,  
                              data: {id: self.attributes.id}});  
        };  
 
    };  
}; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;This simplified a lot of the &lt;code&gt;ViewModel&lt;/code&gt; code as I simply had to create a new object then call the save, update, or remove function after populating it with the data I needed. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;/* Bit of a symbolic manipulation trick here ;). Given that the initialObject and global namespace  
 * use the same name for genres and companies we simply pass a string, use eval to get the object  
 * from global namespace and still use it to reference the attribute we want in the initialObject namespace.  
 */  
var getRelatedNames = function(collectionName) {  
    var singularName = (collectionName === &quot;genres&quot;) ? &quot;genreId&quot; : &quot;companyId&quot;;  
    return _.map(_.pluck(_.filter(eval(collectionName), function(item) {  
        return _.contains(_.pluck(ensureArray(initialObject[collectionName]), singularName), item.id);  
    }),  
                   &quot;name&quot;), function(item) { return item.replace(/\\/g,&#039;&#039;); });  
};  
 
this.attributes.genres = getRelatedNames(&quot;genres&quot;);  
this.attributes.companies = getRelatedNames(&quot;companies&quot;); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;One neat little javascript trick I&#039;m particularly proud off occurs in the client side models side. When loading a game I grab the related genres and companies for a particular game. When I retrieve game information from the serverside I receive two arrays embedded with that data containing the ids of the companies that created and published the game as well as the ids of its genres. I created a function to retrieve the names of those entites from the bootstrapped data, I mentioned earlier, with the use of the eval function to access the correct array of data simply by passing a string. &lt;/p&gt;&lt;p&gt;Officially, Caveman 2 supports two servers for deployment. The first being &lt;a href=&quot;https://github.com/edicl/hunchentoot&quot;&gt;Hunchentoot&lt;/a&gt; which is a web server written in Common Lisp, and FCGI. However Fukamachi recently released a shiny new web server written in Common Lisp called &lt;a href=&quot;https://github.com/fukamachi/woo&quot;&gt;Woo&lt;/a&gt;. Given that I was born to be wild, I decided to go bleeding edge and use Woo as the application server and have Nginx serve as a forward proxy (and serve my static files). Deploying with Woo is simple. Once you have Woo quickloaded (thank you &lt;a href=&quot;http://xach.com/&quot;&gt;Xach Beane&lt;/a&gt;) simply run the following line &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;lisp&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;(start :server :woo) &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;You could add the &lt;code&gt;:port&lt;/code&gt; keyword argument to set it to another port. Caveman 2 also provides a way to start a server via &lt;a href=&quot;https://github.com/fukamachi/shelly&quot;&gt;Shelly&lt;/a&gt; and deploy via the &lt;a href=&quot;http://search.cpan.org/~kazuho/Server-Starter-0.26/lib/Server/Starter.pm&quot;&gt;start_server&lt;/a&gt; Perl module. Given that I&#039;m hosting the application on Ubuntu I&#039;ll probably write a service. &lt;/p&gt;&lt;p&gt;I plan to do a bit more with this system including something to access ebay to get game prices as well as keep me informed on new game deals. I plan on writing a tutorial to help newcomers. There are other web frameworks I would like to check out including &lt;a href=&quot;https://common-lisp.net/project/cl-weblocks/&quot;&gt;Weblocks&lt;/a&gt; and &lt;a href=&quot;https://github.com/Shirakumo/radiance&quot;&gt;Radiance&lt;/a&gt; I just have to think of new web projects to use them in. &lt;/p&gt;</description>
      <pubDate>Wed, 29 Apr 2015 00:00:00 GMT</pubDate>
      <category>common lisp</category>
    </item>
    
    <item>
      <title>Dots And Boxes</title>
      <link>http://blog.optimisedbogosort.com/articles/dots_and_boxes.html</link>
      <description>&lt;p&gt; &lt;/p&gt;&lt;p&gt;After a few attempts at trying to contact IDW Games about hosting an online version of Machikoro, I decided to spare myself of any possible legal trouble and decided to make an online version of the game called &lt;a href=&quot;https://en.wikipedia.org/wiki/Dots_and_Boxes&quot;&gt;Dots and Boxes&lt;/a&gt; instead (the repo is available &lt;a href=&quot;https://github.com/bogosortist/dots-and-boxes&quot;&gt;here&lt;/a&gt;). Like my Machikoro project, I wanted to have a lobby and allow multiple pairs of people to play the game at the same time. A player may only be at one table at a time. &lt;/p&gt;&lt;p&gt;For the uninitiated, dots and boxes is a simple pencil and paper game in which two player take turns connecting dots with lines in an attempt complete a square and leave a mark in them showing they have claimed it. Dots may only be connected to other dots that are orthogonally adjacent to them, that is to its immediate top, bottom, left, or right. &lt;/p&gt;&lt;p&gt;Since Machikoro was basically complete, this project did not take too long to create. There were a few changes however aside from the most obvious change concerning the Models (no need for a card schema, for example). &lt;/p&gt;&lt;p&gt;On the client side of things I decided to try implementing the screen changing mechanism simply by having a variable in the &lt;code&gt;ViewModel&lt;/code&gt; called &lt;code&gt;currentScreen&lt;/code&gt; and providing a method available to all views to check whether or not they should be visible. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;var checkCurrentScreen = function(screenName) {  
    var displayProperty = (app.ViewModel.currentScreen === screenName) ? &quot;display:inherit&quot; : &quot;display:none&quot;;  
    return displayProperty;  
}; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;Given that this game needs a graphical interface, I took some of the code from my &lt;a href=&quot;/articles/adventures_in_canvas_tictactoe_and_space_invaders.html&quot;&gt;canvas tic-tac-toe project&lt;/a&gt; and utilized it here to implement the UI. Using it in the context of Mithril was a bit more complex. &lt;/p&gt;&lt;p&gt;In order to access the actual element, and in turn, the Canvas API in Mithril I had to utilize the &lt;code&gt;config&lt;/code&gt; API which is available to all Mithril views. The &lt;code&gt;config&lt;/code&gt; may be used in a number of ways including holding certain configuration information (hence then name) relevant to the view, between redraws. The &lt;code&gt;config&lt;/code&gt; function is called with three arguments, the element it&#039;s operating on, a boolean representing whether or not the view has been initialized, and a &quot;context&quot; object which holds information to be retained with each redraw. The config code for the canvas view is a bit long so if you want to see it please check out the &lt;a href=&quot;https://github.com/bogosortist/dots-and-boxes/blob/master/static/js/views.js&quot;&gt;repository page in the views.js file&lt;/a&gt;. One caveat is that Mithril strongly suggests &lt;strong&gt;against&lt;/strong&gt; modifying the &lt;code&gt;ViewModel&lt;/code&gt; from the config, however I found that wrapping the &lt;code&gt;config&lt;/code&gt; in some kind closure or some other mechanism to be too cumbersome. &lt;/p&gt;&lt;p&gt;One of the major back end changes I made was the requirement that the user not only register a username but pass a captcha test via &lt;a href=&quot;https://www.google.com/recaptcha/intro/index.html&quot;&gt;Google&#039;s Recaptcha project&lt;/a&gt;. In the back end I verified the Recaptcha response with Node&#039;s native &lt;code&gt;Https.get&lt;/code&gt; call. Wanting to keep with using promises I promisified it using &lt;a href=&quot;https://github.com/petkaantonov/bluebird&quot;&gt;Bluebird&#039;s Promise constructor&lt;/a&gt;. The solution I wrote is based on code found &lt;a href=&quot;https://jaxbot.me/articles/new-nocaptcha-recaptcha-with-node-js-express-12-9-2014&quot;&gt;here&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;/* http/https get method from node js does not follow standard callback protocol  
 * Code taken from this blog post https://jaxbot.me/articles/new-nocaptcha-recaptcha-with-node-js-express-12-9-2014  
 * In short, https.get is basically a http.request call that automically has an &#039;end&#039; callback and sets  
 * to get. http.get/http.request return a http.ClientRequest, which implements a readable stream which in return  
 * waits accepts a signal called data, which in turn holds the response from the server.  
 */  
var Https = require(&quot;https&quot;);  
var getRequest = Promise.method(function(options) {  
    return new Promise(function(resolve, reject) {  
        var request = Https.get(options, function(response) {  
            response.on(&#039;data&#039;,function(chunk) {  
                resolve(JSON.parse(chunk.toString()));  
            });  
            response.on(&#039;error&#039;,function(error) { reject(&quot;Could not complete HTTPS request&quot;); });  
        });  
    });  
}); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;Once the player is registered I setup a user session for them with the help of the &lt;a href=&quot;https://www.npmjs.com/package/connect-mongo&quot;&gt;connect-mongo library&lt;/a&gt;. In order to use sessions with Socket.IO I simply called the &lt;code&gt;use&lt;/code&gt; method to tell it to use the connect middleware as it&#039;s own middleware. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;io.use(function(socket, next) {  
    sessionMiddleware(socket.request, socket.request.res, next);  
}); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;In order to allow multiple games to take place simultaneously I had to employ the use of Socket.IO rooms. As their name implies, rooms group users into a namespace by which messages can be emitted to them and them alone. Taking the randomly generated ID each &lt;code&gt;GameTable&lt;/code&gt; recieves upon creation, I create a room with the ID as the name of the room. When a player joins the room, I set the name of the room in their session. Emitting signals to just the room is done simply by chaining the &lt;code&gt;to&lt;/code&gt; function before the &lt;code&gt;emit&lt;/code&gt; function. &lt;/p&gt;&lt;p&gt;That pretty much wraps up the changes and additions I needed to make this game work. You can play it &lt;a href=&quot;http://dotboxes.optimisedbogosort.com/&quot;&gt;here&lt;/a&gt;. Enjoy! &lt;/p&gt;</description>
      <pubDate>Wed, 25 Mar 2015 00:00:00 GMT</pubDate>
      <category>javascript</category>
    </item>
    
    <item>
      <title>The Backend Streets of Hometown Machikoro</title>
      <link>http://blog.optimisedbogosort.com/articles/the_backend_streets_of_hometown_machikoro.html</link>
      <description>&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;em&gt; EDIT (03-25-2014) : Due to the fact I have not received any sort of correspondance from IDW Games, I am unable to secure any sort of right to make the boardgame Machikoro available for users online. The code for this project was salvaged and used in a project the same goal of creating a turn-based, multiplayer game with Socket.IO. The write up for the follow-up project, with links to play the game are available &lt;a href=&quot;/articles/dots_and_boxes.html&quot;&gt;in this artile&lt;/a&gt;. The original code for this project has been removed from Github, however the snippets here remain in place since it is not the complete game. &lt;/em&gt;  &lt;/p&gt;&lt;p&gt;In order to make my &lt;a href=&quot;/articles/socket_to_me_io.html&quot;&gt;single table Machikoro implementation&lt;/a&gt; fit to handle multiple game tables at once I had to implement a much more comprehensive backend. Up to this point the backend was just a Socket.IO server that simply echoed messages sent by other users. Furthermore, card and table information was kept in simple, plain old javascript data structures. &lt;/p&gt;&lt;p&gt;I originally wanted to use Redis for the backend database, however after attempting to model a game table, complete with a player roster and inventory of available cards it was clear given that Redis wasn&#039;t the best choice for the job. Instead I decided to use Mongodb as it has support for embedded documents making it easier to keep all related data in one place. I decided to use &lt;a href=&quot;http://mongoosejs.com/&quot;&gt;Mongoose&lt;/a&gt; to interface the Mongodb server. &lt;/p&gt;&lt;p&gt;The &lt;code&gt;GameTableSchema&lt;/code&gt; is perhaps the most important table in the project as it represents a play session. The table contains not only the roster of the players but an inventory of available cards as well as turn order for the game. &lt;/p&gt;&lt;p&gt;One thing that got a bit hairy is the table joining situation. Machikoro is played with a maximum of four people at a table. Consider the situation where two people click the same &quot;join table&quot; button at the same time for a table who only has one available space left. Who gets in? Checking the table&#039;s capcity before joining could be problematic as they would both see &quot;3&quot; at the same time. What we have is a text book race condition. &lt;/p&gt;&lt;p&gt;The way I decided to deal with it is to simply allow both of them to join the table, then after recording their information, check to see who actually holds the fourth location in the table roster. If their socket id matches the one in the last position that player joins while the other is kicked and simply recieves an error that the table is full. &lt;/p&gt;&lt;p&gt;In Machikoro, the player tries to be the first to build four special buildings known as landmarks. In order to gain money to build these landmarks, the player must build their city by buying other cards that gains them money based on what number is rolled on the die. Cards are divided into four sub groups, one of which allows certain players to steal money from the person who rolls the die, two gain the player money, and the fourth category which allows a player to take a special action outside of simply collecting money. Given these general categories I created a card Schema that reflect this, but the more interesting aspect about this schema is he effect column. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;Models.CardSchema = mongoose.Schema({  
    name: String,  
    activationNumber: [Number],  
    establishmentType: String,  
    buildingType: String,  
    cost: Number,  
    description: String,  
    effect: { method: String,  
              arguments: [mongoose.Schema.Types.Mixed]  
            },  
    quantity: Number  
}); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;Instead of storing the card&#039;s type, the effect attribute of the schema held a function name correspoding to a &lt;code&gt;GameTableSchema&lt;/code&gt; method that could be dispatched with the &lt;code&gt;[]&lt;/code&gt; operator. By using the &lt;code&gt;apply&lt;/code&gt; function I was able to take the stored list of arguments and make a function call. For example, some cards allow a player to collect 2 coins for every card they own with a bread symbol on it. The effect is multiplied if they have multiple copies of that card particular card. The &lt;code&gt;GameTableSchema&lt;/code&gt; has method &lt;code&gt;multCoin&lt;/code&gt; that handles this accepts four arguments which is kept as an array in the database. Using a code snippet similar to the block following I am able to add new cards without needing to write new code! &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;GameTableSchema[card.effect.method].apply(this, constructArgumentList(playerIndex, card)); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;Given the asynchronous nature of Node.js things can get a bit messy on the back end. Having endless chains of callbacks within callbacks can become particularly messy especially if an error were to occur. To help deal with this I decided to use the &lt;a href=&quot;https://github.com/petkaantonov/bluebird&quot;&gt;Bluebird library&lt;/a&gt; to help promisify Mongoose. &lt;a href=&quot;https://www.promisejs.org/&quot;&gt;Promises&lt;/a&gt;, essentially function like normal callbacks in that a function is registered to respond to the fulfillment of an unevaluated value called a promise. A promise provides a special API called &quot;then&quot; which allows the programmer to operate on the newly evaluated value. If the programmer whishes to chain another operation they may simply return another promise in the handler code. Another advantage over normal callbacks is that if a promise were to ever fail or get rejected at anytime in the handler chain it would call the most immediate handler thats equipped to deal with a rejected value (the API may very depending on the implementation you are using). &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;socket.on(&quot;buy-card-or-build&quot;, function(data) {  
    Promise.all([GameTable.findOneAsync({socketRoomId: socket.request.session.currentTable}),  
                 Cards.findOneAsync({name: data.cardName})  
                ])  
        .spread(function(table, card) {  
            var player = _.find(table.players, function(player) { return player.socketId === socket.id; });  
            var promise = {};  
            ... &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;Bluebird is especially helpful in that it provides a few ways of handling promises. For example when a user decides to buy a card, I needed to find the table the user is currently located at and the card the person decided to buy. Since these two search operations are independent of each other I use the &lt;code&gt;Promise.all&lt;/code&gt; function provided by blue bird to create a promise that returns an array of the two search operations. Once the promise is fulfilled, &lt;em&gt;i.e.&lt;/em&gt; mongoose has returned the results of the query, I use the &lt;code&gt;spread&lt;/code&gt; function to register an operation to carry out upon fulfilling the promise. &lt;/p&gt;&lt;p&gt;I hope to finish this project soon. I&#039;m getting a little worried as I still haven&#039;t heard back from IDW Games on my query about whether or not I&#039;m allowed to host this project for people to use. In any case stay posted for the finish project and further analysis of the code. &lt;/p&gt;</description>
      <pubDate>Sun, 8 Mar 2015 00:00:00 GMT</pubDate>
      <category>javascript</category>
    </item>
    
    <item>
      <title>Socket To Me IO</title>
      <link>http://blog.optimisedbogosort.com/articles/socket_to_me_io.html</link>
      <description>&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;em&gt; EDIT (03-25-2014) : Due to the fact I have not received any sort of correspondance from IDW Games, I am unable to secure any sort of right to make the boardgame Machikoro available for users online. The code for this project was salvaged and used in a project the same goal of creating a turn-based, multiplayer game with Socket.IO. The write up for the follow-up project, with links to play the game are available &lt;a href=&quot;/articles/dots_and_boxes.html&quot;&gt;in this artile&lt;/a&gt;. The original code for this project has been removed from Github, however the snippets here remain in place since it is not the complete game. &lt;/em&gt;  &lt;/p&gt;&lt;p&gt;Recently, I&#039;ve been playing a board game called &lt;a href=&quot;http://idwgames.com/machi-koro/&quot;&gt;Machikoro&lt;/a&gt; quite a bit. The game plays like a faster, stream lined version of &lt;a href=&quot;http://www.catan.com/&quot;&gt;Settlers of Catan&lt;/a&gt;. Players try to build a city using money they gain from buildings that &quot;activate&quot; at certain dice rolls. I was inspired to write and recreate the boardgame experience online because many of friends are either out of state or unavailable to meet up to play. &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://socket.io/&quot;&gt;Socket.IO&lt;/a&gt; is an implementation of the web socket protocol with fallbacks to Adobe Flash&#039;s socket if a browser doesn&#039;t happen to support it. The cool thing about web sockets is that they allow for real time web apps without the need to do long polling which is, as the name implies, constantly hitting the web server looking for a response. Instead, web sockets allow a programmer to push messages to the client just like a normal unix socket. &lt;/p&gt;&lt;p&gt;I would like this implementation to include a lobby so that multiple parties can play the game at the same time. While I am not entirely sure how to implement something like that I decided to start off simple by creating a game where only one group of people can play the game at a time. &lt;/p&gt;&lt;p&gt;With modern tools at our disposal setting up an applications that use web sockets has never been easier. There are two parts to a web socket application, the application server, which can be anything web server that supports web sockets, like &lt;a href=&quot;https://github.com/3b/clws&quot;&gt;clws&lt;/a&gt; or &lt;a href=&quot;http://socket.io/&quot;&gt;Socket.IO&lt;/a&gt; and a client script that allows the browsers to open a socket connection. For Socket.IO, this process is fairly straight forward. Simply run the &lt;code&gt;io.on&lt;/code&gt; function to listen into the &lt;code&gt;connection&lt;/code&gt; signal and provide a function that provides a socket. On the client side, simply include the &lt;code&gt;socket.io.js&lt;/code&gt; script which is automatically provided by the socket.io server then call the &lt;code&gt;io&lt;/code&gt; function with the url to the server. This will in turn give you a web socket client reference. &lt;/p&gt;&lt;p&gt;At this point passing messages between the client and the server is pretty straight forward. The client calls the &lt;code&gt;emit&lt;/code&gt; message with the signal name and a JSON object with data to be sent over. &lt;/p&gt;&lt;p&gt;I am using Socket.IO with the &lt;a href=&quot;http://expressjs.com/&quot;&gt;ExpressJS&lt;/a&gt; framework. Unlike the normal routes you would need to set up with Express, Socket.IO requires no such set up as it pretty much acts as it&#039;s own entity. &lt;/p&gt;&lt;p&gt;On the UI side of things I decided to use the &lt;a href=&quot;https://lhorie.github.io/mithril/&quot;&gt;Mithril client-side MVC framework&lt;/a&gt; for it&#039;s simplicity. That and I have previous experience working with it from work. Mithril is very straight forward. An application only requires two classes to function, a controller and a view. Models, while optional, are quite useful for the obvious reason in that they keep data consistent between the client and server. On the client side I set up a few models to represent some of the game objects I expect recieve information from the  server, such as player information. I also setup a client exclusive model to keep track of events that occur at the table, which is basically a normal Javascript array used as a queue. &lt;/p&gt;&lt;p&gt;The interesting thing about Mithril is the framework&#039;s &lt;a href=&quot;https://lhorie.github.io/mithril/getting-started.html&quot;&gt;starter guide&lt;/a&gt; suggests creating a &lt;code&gt;ViewModel&lt;/code&gt; object to store the application&#039;s state. This is due to the fact that the client side of the application doesn&#039;t have to do any sort of data marshalling between the models defined on the client side to some sort of other representation of data &lt;em&gt;e.g.&lt;/em&gt; from a JSON object to a Common Lisp property list. The controller, in many cases, seems to be used either as a simple initiator for the ViewModel object, or in the case of a stand alone module, to expose some sort of API to the ViewModel object in the context of a larger application. &lt;/p&gt;&lt;p&gt;Mithril exposes itself to the DOM via the &lt;code&gt;module&lt;/code&gt; function, accepting an object containing a controller and view attribute. This means that Mithril only accepts one view for the whole application. Given I needed multiple screens in the long run one for the lobby, one for the game, and a few others for creating tables this seemed to be problematic at first. However an easy work around is to combine all of the screens into a single view and hiding and revealing block elements with the ever handy &lt;code&gt;display&lt;/code&gt; CSS property. &lt;/p&gt;&lt;p&gt;Mithril views is a Virtual DOM created by calling the &lt;code&gt;m&lt;/code&gt; function which takes a string representing a &lt;code&gt;css&lt;/code&gt; selector, much like jQuery (or sizzle if you wnat to get technical), an optional object containing HTML attributes, a string for a text node, and an array of child objects. The optional object is the key here in creating a multi-screen UI as it can be passed the &lt;code&gt;display&lt;/code&gt; property via the &lt;code&gt;style&lt;/code&gt; attribute. To help manage a screen&#039;s visibility as well as the visibility other UI elements, such as button panels, I decided to create a closure that represents which screen to display. The function returned took one required argument and an optional argument used to change the screen. In the case of checking whether or not a screen should be displayed the user simply passes the name of the screen as a string. The second argument is a simple boolean, which if true, changes the closed over variable keeping the state of the currently visible screen. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;vm.displayOrNot = function(initialState) {  
    var currentState = initialState;  
    return function(value, change) {  
        if (change) {  
            currentState = value;  
        };  
        var displayProperty = (value == currentState) ? &quot;display:inherit&quot; : &quot;display:none&quot;;  
        return displayProperty;  
    };  
}; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;I decided to apply the &lt;code&gt;currying&lt;/code&gt;/&lt;code&gt;partial function&lt;/code&gt; technique to provide an auxilliary function that makes things apparent when I am changing the screen. This fucntion was also created as I would occasionally forgot to add true when I meant to change the screen instead of simply check if it should be visible or not. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;vm.changeScreen = _.partialRight(vm.currentScreen, true); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;On the view side of things I created a closure for whole UI screens by calling &lt;code&gt;displayOrNot&lt;/code&gt; like so &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;vm.currentScreen = vm.displayOrNot(&quot;lobby&quot;); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;Then applied it to the different screens calling the newly created &lt;code&gt;currentScreen&lt;/code&gt; function and handing it the name of the screen it represents in the style attribute. For example &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;m(&quot;div&quot;, {style:app.vm.currentScreen(&quot;table&quot;)}, [  
    m(&quot;div.row&quot;, [  
        m(&quot;div.col-xs-12&quot;, [  
            createCurrentTurnDisplay(),  
.... &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;One other thing that sets Mithril apart from other client side MVC frameworks is it&#039;s use of closures. Within the &lt;code&gt;ViewModel&lt;/code&gt; object, I keep a lot of state, particularly for forms. The Mithril &lt;code&gt;m.prop&lt;/code&gt; function is a closure that stores  whatever value you initially give it. The closure takes a single optional argument. When it is called without an argument, it returns the value it is currently storing. If it is called with the optional argument, it stores the new value internally then returns the new value. To illustrate &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javscript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;//Initial representation  
vm.name = m.prop(&quot;&quot;);  
 
vm.name.prop(&quot;Bryan&quot;) // returns Bryan  
 
vm.name.prop() // returns Bryan again  
 
vm.name.prop(&quot;Jeff&quot;) // now returns Jeff  
 
vm.name.prop() // Returns Jeff &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;While this may seem counter intuitive at first, it&#039;s actually pretty neat when applied to javascript DOM event handlers. The name property I mentioned above is actually used to register the player&#039;s nickname upon connection. Utilizing the &lt;code&gt;currying&lt;/code&gt;/&lt;code&gt;partial function&lt;/code&gt; techique we are able to set the &lt;code&gt;onchange&lt;/code&gt; attribute of an &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; tag to a function that captures it&#039;s &lt;code&gt;value&lt;/code&gt; attribute. Mithril provides a function called &lt;code&gt;withAttr&lt;/code&gt; that facilitates the behavior of binding a function with the value of the html attribute you specify. &lt;/p&gt;&lt;p&gt;&lt;code&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;m(&quot;input[type=text]&quot;, {onchange: m.withAttr(&quot;value&quot;, app.vm.name)}) &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;In the code above our &lt;code&gt;vm.name&lt;/code&gt; closure is now called with the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&#039;s value for an argument. &lt;/p&gt;&lt;p&gt;Mithril handles redrawing on it&#039;s own in a pretty efficient manner. However, there are some occasions in which the coder needs the control when the interface should redraw. While Mithril has a method to directly trigger a redraw, it also provides two methods called &lt;code&gt;m.startComputation&lt;/code&gt; and &lt;code&gt;m.endComputation&lt;/code&gt; that allows Mithril to decide when to redraw, which is usually much more efficient. I had to use these two methods whenever a web socket message was received. &lt;/p&gt;&lt;p&gt;Other than that, the single table prototype is fairly straight forward. You can see the progress here (the link has been removed, see the edit notice above). Hopefully I will have completed the multiple table implementation in my next blog post. &lt;/p&gt;</description>
      <pubDate>Fri, 13 Feb 2015 00:00:00 GMT</pubDate>
      <category>javascript</category>
    </item>
    
    <item>
      <title>Adventures In Canvas: Tic-tac-toe and Space Invaders</title>
      <link>http://blog.optimisedbogosort.com/articles/adventures_in_canvas_tictactoe_and_space_invaders.html</link>
      <description>&lt;p&gt; &lt;/p&gt;&lt;p&gt;One of the more interesting developments in recent years concerning HTML 5 is the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; tag. This tag essentially provides a framebuffer (referred to as a &quot;drawing context&quot; in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API&quot;&gt;MDN articles&lt;/a&gt;) and supports a simple 2d rendering context and, perhaps the more impressive, OpenGL rendering context, complete with support for sharders. &lt;/p&gt;&lt;p&gt;Perhaps the biggest use I&#039;ve seen for the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; tag thus far is making games playable through the web browser. Yes, we no longer need a pesky plugin, a la Adobe Flash, to make games available to the internet masses. Instead we can use what so many already have built into their browsers, a Javascript interpreter. The API is quite simple to work with, particularly if you use the 2d rendering context. Having in interest in game development myself, I decided to take this opportunity to create 2 simple games to learn this growingly important API. &lt;/p&gt;&lt;p&gt;The first game I decided to create is &lt;a href=&quot;/static/js/tictactoe/index.html&quot;&gt;tic-tac-toe&lt;/a&gt; (the repo is available &lt;a href=&quot;https://github.com/bogosortist/canvas-tic-tac-toe&quot;&gt;here&lt;/a&gt;). With no real time elements to worry about, or even a clock needed to keep the frame-rate steady, it&#039;s implementation is fairly straight foward. I chose to use the 2d rendering context instead of the OpenGL as I wanted the game to be playable on all browsers regardless of whether or not they support OpenGL, that and I didn&#039;t need 3d acceleration. The 2d rendering context behaves similar to SDL&#039;s default 2d drawing buffer. For the uninitated, SDL&#039;s 2d drawing buffer behaves like a cartesian coordinate plane, by which you specify a set of coordinates to draw at a given position on the screen. The origin of this coordinate system is located on the upper left hand side of the buffer. Coordinate values increase right and downward for the X and Y axes respectively. &lt;/p&gt;&lt;p&gt;A &lt;code&gt;box&lt;/code&gt; or &lt;code&gt;rectangle&lt;/code&gt; class is a fairly standard structure/class seen in video game programming. Often integegrated into a &lt;code&gt;Sprite&lt;/code&gt;, the &lt;code&gt;box&lt;/code&gt; helps us keep track of an object&#039;s position and provides us a convenient way determine the proximity of other objects realtive to it in &quot;World Space&quot;. I based my implementation on a class called &lt;code&gt;Rect&lt;/code&gt; from the &lt;a href=&quot;http://www.pygame.org/news.html&quot;&gt;Pygame library&lt;/a&gt;. In addition to having methods to calculate the x and y coordinates of the virtual box&#039;s sides and center point, the most notable method this class has to offer is the &lt;code&gt;hasCollided&lt;/code&gt; method. &lt;/p&gt;&lt;p&gt;&lt;code&gt;hasCollided&lt;/code&gt; offers us a way to perform &quot;collision detection&quot;, which basically means determining whether or not a given game entity has come into contact with another entity in the game. In the case of Tic-tac-toe, we use it to determine whether not a space has been clicked. The method is used internally by the &lt;code&gt;GameSquare&lt;/code&gt; method, essentially acting as our &lt;code&gt;Sprite&lt;/code&gt; class and setting the mark according to the current turn. &lt;/p&gt;&lt;p&gt;The &lt;code&gt;Board&lt;/code&gt; class is essentially a two-dimensional array that keeps track of the game&#039;s state as well as checking for any winning possible combinations (a completed row, a completed column, or completed diagonal containing the same symbol). While it&#039;s pretty standard stuff, one thing I am particularly happy about is how I went about checking the diagonals. With the help of the useful &lt;a href=&quot;https://lodash.com/&quot;&gt;lodash library&lt;/a&gt;, I was able to shorten the code quite a bit and make things a bit more general (a game of tic-tac-toe can be played on something larger than a 3x3 grid, just change the row size). &lt;/p&gt;&lt;p&gt;Originally I had wanted to simply to foldl/reduce the values for the row and column checks, however things ended up a bit more complicated, than the more straight foward for loop. For the diagonals however, I was able to apply a functional programming technique called &lt;em&gt;currying&lt;/em&gt;. &lt;em&gt;Currying&lt;/em&gt; is a method of creating a new function based on another function with some of it&#039;s arguments already in place. To demonstrate let us examine the following function &lt;code&gt;greeting&lt;/code&gt; &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;//Greet a user with a custom greeting  
 
var greeting = function(opener, username) {  
    return (opener + &quot; &quot; + username);  
} &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;While writing the rest of our code we realize notice that our &lt;code&gt;greeting&lt;/code&gt; function is frequently called with the words &quot;salutations&quot; and &quot;hello&quot; for the &lt;code&gt;opener&lt;/code&gt; argument. Being too lazy to constantly type out &lt;code&gt;greeting(&quot;salutations&quot;, someUser)&lt;/code&gt; or &lt;code&gt;greeting(&quot;hello&quot;, someUser)&lt;/code&gt; all the time, we decide to create a function to eliminate the need to type out the first argument. One way we could do this is by taking advantage of closures and simply calling greeting internally and returning the new value like so. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;//Salutations  
var salute = function(username) {  
    return greeting(&quot;salutations&quot;, username);  
};  
 
//Hello  
var hello = function(username) {  
    return greeting(&quot;hello&quot;, username);  
}; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;While this works fine, Javascript provides a method much more suited for the job, &lt;code&gt;bind&lt;/code&gt;. The function &lt;code&gt;bind&lt;/code&gt; takes a variable number of arguments, the first being what the keyword &lt;code&gt;this&lt;/code&gt; is bound to, and the remaining arguments are arguments used to call the function from left to right. The &lt;code&gt;bind&lt;/code&gt; function then returns a new function that takes &lt;em&gt;n-m&lt;/em&gt; arguments, where &lt;em&gt;n&lt;/em&gt; is the arity of the original function and &lt;em&gt;m&lt;/em&gt; is the number of arguments we passed to bind. This elegantly accomplishes our goal of shortening our function call in a single line. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;//Salutations  
var salute = greetings.bind(this, &quot;salutations&quot;); //salute(&quot;some guy&quot;) =&amp;gt; &quot;salutations some guy&quot;  
 
//Hello  
var hello = greetings.bind(this, &quot;hello&quot;); //hello(&quot;some guy&quot;) =&amp;gt; &quot;hello some guy&quot; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;Pretty nifty if I do say so myself. &lt;/p&gt;&lt;p&gt;The lodash library provides a way to create partial functions that apply arguments from right to left. Seeing as how diagonals are checked either by traversing the rows and columns incrementing them one at a time for the case going left-to-right or doing a sort of inversion of the row and column count, I create a partial function based on lodash&#039;s own &lt;code&gt;forEach&lt;/code&gt; function. The &lt;code&gt;forEach&lt;/code&gt; function takes three arguments, an iterable, a function to applied to each item of the iterable, and finally the binding for the &lt;code&gt;this&lt;/code&gt; keyword. Given that the function to be run can be generalized for both the left-to-right and right-to-left case, the only thing that really differs is the range of index values we wish to traverse the array of squares at. As such I defined the check diagonals as such &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;var checkDiags = function(type) {  
    var winner = &quot;&quot;;  
    var initialSymbol = (type === &quot;forward&quot;) ? self.squareCollection[0][0].symbol : self.squareCollection[self.rowSize-1][0].symbol;  
    var accumulator = true;  
    var forEachPartial = _.partialRight(_.forEach, function(i) {  
        if (!_.isEmpty(initialSymbol)) {  
            var check = (type === &quot;forward&quot;) ? self.squareCollection[i][i].symbol : self.squareCollection[i][Math.abs((self.rowSize-1)-i)].symbol;  
            accumulator = ((initialSymbol === check) &amp;amp;&amp;amp; accumulator);  
        }  
    });  
 
    if (type === &quot;forward&quot;) {  
        forEachPartial(_.range(self.rowSize));  
    } else {  
        forEachPartial(_.range((self.rowSize-1), -1, -1));  
    }  
 
    if (accumulator) {  
        winner = initialSymbol;  
    };  
    return winner;  
}; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;The only other notable thing in the code is how mouse clicks are handled. The x and y coordinates of a users click differs between browsers. Every browser, except for Firefox provides the x and y cordinates through similarly named attributes in the object itself. For Firefox users we must use the clientX and clientY, which unfortunately is affected by the the scroll position as well as any sort of offset we place on the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element itself. Luckily, we live in a time where stack overflow exists and found &lt;a href=&quot;https://stackoverflow.com/questions/55677/how-do-i-get-the-coordinates-of-a-mouse-click-on-a-canvas-element&quot;&gt;this solution&lt;/a&gt; &lt;/p&gt;&lt;p&gt;With this prototype out of the way I wanted to try something a bit more challenging. Seeing that I had some assets lying around from an old Space Invaders project, I decided to recreate the arcade classic using &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; and plain old Javascript. You can play the game &lt;a href=&quot;/static/js/spaceinvaders/index.html&quot;&gt;here&lt;/a&gt; and see the code repository &lt;a href=&quot;https://github.com/bogosortist/space-invaders-canvas&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;One of the most important things in game programming is to ensure that the framerate is stable. Some game programming libraries have their own clock implementations (&lt;em&gt;e.g.&lt;/em&gt; &lt;a href=&quot;http://www.pygame.org/docs/ref/time.html&quot;&gt;pygame.time&lt;/a&gt;) and others require you to roll your own, the &lt;code&gt;window&lt;/code&gt; object in Javascript provides the &lt;code&gt;requestAnimationFrame&lt;/code&gt; function which registers a callback function. &lt;/p&gt;&lt;p&gt;With turn based games, without any sort of animated objects like tic-tac-toe we can get away with just using one canvas. However when you add moving pieces to the mix things get slightly more complicated. Simply changing the x and y coordinates of our object and redrawing it would cause a sort of ghost trail of our game object. The remedy to this we simply &quot;clear&quot; the canvas by redrawing our background or blanking out our screen with a single color before redrawing our game object. However, there in lies another problem. &lt;/p&gt;&lt;p&gt;In the tic-tac-toe game I used a single canvas, which was only updated every time a move was made. This is in stark contrast to Space Invaders, where objects  move constantly, and in turn, update constantly, redrawing the background and and then the sprite. This causes an a weird flickering effect that&#039;s more annoying than anything else. To deal with this problem, game programmers often employ a technique known as double buffering. &lt;/p&gt;&lt;p&gt;As the name implies, double buffering employs the use of two graphic buffers. The first is displayed to the player, while the other is hidden from the player. The new, updated scene is drawn onto the hidden buffer, so that when the next frame is requested, we simply replace the visible buffer with the hidden buffer allowing for a smooth transition without any flicker. In Javascript, this means having two canvas objects. To help manage the buffers I created a &lt;code&gt;Display&lt;/code&gt; object which provides a nice API that guarantees that the correct buffer is being drawn to. &lt;/p&gt;&lt;p&gt;Aside from the myriad of classes representing the different entities in the game, one class that&#039;s particularly interesting is the &lt;code&gt;SpriteGroup&lt;/code&gt; class. I originally created the &lt;code&gt;SpriteGroup&lt;/code&gt; class to help me manage the rather peculiar behavior of the enemy entities. While the enemy entities have their own methods to manage collision detection and positional updates, as a group, they really act as a single unified entity. This is really apparent in deciding when to move left, right, or downward. The &lt;code&gt;SpriteGroup&lt;/code&gt; holds an array of game entities of a single type. Given this, we can expect a unified API when dealing with the underlying entities. Thusly, the most interesting function in this class is the &lt;code&gt;dispatch&lt;/code&gt; function which calls a given method of a given class. &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;var SpriteGroup = function(roster) {  
 
    this.spriteRoster = roster;  
 
    this.dispatch = function(spriteFunction, argList) {  
        return _.map(this.spriteRoster, function(sprite) {  
            return sprite[spriteFunction].apply(sprite, argList);  
        });  
    };  
    ...  
}; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;Taking advantage of the fact we can access any attribute, including class methods, in an object&#039;s prototype via the &lt;code&gt;[]&lt;/code&gt; operator we can pass the function we wish to call as a string. Given that we don&#039;t know how many arguments a given function will take we use the ever useful &lt;code&gt;apply&lt;/code&gt; function. The &lt;code&gt;apply&lt;/code&gt; function calls the function with the values supplied to it as an array. This very simple function allows us to go from this: &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;spriteGroup.roster.forEach(function(item) { item.doSomething(arg1, arg2, arg3); };  
spriteGroup.roster.forEach(function(item) { item.doSomethingElse(arg1, arg2); }; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;to this: &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;spriteGroup.dispatch(&quot;doSomething&quot;, [arg1, arg2, arg3]);  
spriteGroup.dispatch(&quot;doSomethingElse&quot;, [arg1, arg2]); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;If you wanted to take it a step further, you could apply the &lt;code&gt;currying&lt;/code&gt; technique mentioned earlier in this post to allow for something like: &lt;/p&gt;&lt;p&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;var doSomething = spriteGroup.dispatch.bind(this, &quot;doSomething&quot;);  
var doSomethingElse = spriteGroup.dispatch.bind(this, &quot;doSomethingElse&quot;);  
 
...  
 
//Some where else in the code  
doSomething([arg1, arg2, arg3]);  
doSomethingElse([arg1,arg2,arg3]); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;Which be pretty useful if you wish to expose some method in a specialized sprite group, which is more convenient than forcing the programmer to know that the underlying entity the &lt;code&gt;SpriteGroup&lt;/code&gt; is representing has a method called &lt;code&gt;doSomething&lt;/code&gt; or &lt;code&gt;doSomethingElse&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Images are handled much in the same way you would handle them in plain old HTML, with an &lt;code&gt;Image&lt;/code&gt; DOM element. Sounds, on the other hand, are handled with the help of the new &lt;code&gt;Audio&lt;/code&gt; DOM element. I created a small wrapper object to help manage the sounds. &lt;/p&gt;&lt;p&gt;While tic-tac-toe was essentially a one screen game, Space Invaders has several screens, an intro screen, the main game screen, and a game over screen when you run out of lives. Throw in the fact that each screen has it&#039;s own controls , and things get slightly more complicated. However, this can be managed with a simple switch statement. &lt;/p&gt;&lt;p&gt;Overall I&#039;m pretty happy with the result. One huge improvement I could&#039;ve implemented was the use of a sprite sheet. Given that the original assets are actual, phsyical cut outs of construction paper, I didn&#039;t really feel like combining all the sprites into one sheet and manipulating what section of the sprite sheet to display. In all a fun set of projects to learn Canvas on. I can definitely see this being a big thing in the future of web development. &lt;/p&gt;</description>
      <pubDate>Sun, 25 Jan 2015 00:00:00 GMT</pubDate>
      <category>javascript</category>
    </item>
    
    <item>
      <title>Static Noise</title>
      <link>http://blog.optimisedbogosort.com/articles/static_noise.html</link>
      <description> &lt;p&gt;In the winter break following my first term in college, I had suddenly been bitten by the web dev bug. For some odd reason I had wanted to try my hand at coding something for the web space, namely a blog engine. I had grown quite comfortable using Linux as a desktop machine and I felt ready to try tackling the task administrating my own Linux server. I decided to install Debian on the &lt;a href=&quot;/articles/the_penguin_the_wizard_and_the_server_rack&quot;&gt;old Dell computer my cousin gave me&lt;/a&gt;, and configured it as a web server using the (then) new Apache 2.0 and registering a domain using a free Dynamic DNS service. Looking back at it, I was quite lucky I never got a large amount of traffic as violating my ISP&#039;s TOS would&#039;ve left me internetless. &lt;/p&gt;&lt;p&gt;I wrote my blog engine in PHP as it was gaining a lot of popularity for web based projects due to it&#039;s ease of deployment and speed boost thanks to mod_php. The blog engine worked in a very strange way. I didn&#039;t know about the text field type in MySQL, so I used the database to keep track of text file locations which essentially read from and inserted the text into a web page. The implementation was crud and naive to say the least, but it worked reliably enough and served me well for quite a while. From there my blog engine went through several iterations, changing languages along the way, from PHP to Python with the help of Django, to being completely replaced by Wordpress, and then back to Python using &lt;a href=&quot;http://docs.getpelican.com/en/3.5.0/&quot;&gt;Pelican&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;Once again I am moving the contents of this blog to a new engine and once again I have concocted a home grown solution I call &lt;a href=&quot;https://github.com/bogosortist/static-noise&quot;&gt;Static Noise&lt;/a&gt;. Wanting to keep up with all the hip and trendy programmers, I decided to beat the dead horse people so fondly refer to as static site generators. Honestly, I was simply grabbing for project ideas, and while I am planning something a bit more involved, I lack the time to plan and code it due to work and other engagements, You can read more about how to use it on the project&#039;s &lt;a href=&quot;https://github.com/bogosortist/static-noise&quot;&gt;repository page&lt;/a&gt;. The rest of this entry is more of a post mortem of the project. &lt;/p&gt;&lt;p&gt;Given how integral the REPL is to developing software on Common Lisp is, I decided to leave it as something to be used interactively on the REPL. Since I&#039;m using emacs to type the blog up and I usually have SLIME readily open it seemed to be a natural way of doing things. Honestly, the generator is more of a static site creating command language. &lt;/p&gt;&lt;p&gt;The generator itself, is designed as a pipeline, collecting metadata from the files that make up the page and blog entries, sorting the articles by their creation date, creating slugs for links, and figuring out which article precedes and succeeds it. This data-centric approach makes things a lot to easier to debug and test because each stage has output that can be examined and verified. Thusly, the first order of business in implementing the generator was to find a way to reliably traverse directory trees and manipulate the files contained within them. &lt;/p&gt;&lt;p&gt;This problem is made slightly complicated in the fact that different implementations of Common Lisp, handle pathnames differently. Luckily this problem, and it&#039;s suggest solution, is &lt;a href=&quot;http://www.gigamonkeys.com/book/practical-a-portable-pathname-library.html&quot;&gt;very well documented&lt;/a&gt;, and even better, has been made into a nice little library called &lt;a href=&quot;http://weitz.de/cl-fad/&quot;&gt;CL-FAD&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;CL-FAD provides many convenient methods to merge pathnames, check for a file&#039;s existence, to deleting whole directory trees. One thing CL-FAD does not provide however, is a way to copy whole directories. This was easy to get around however, as it provides a neat &lt;a href=&quot;https://en.wikipedia.org/wiki/Higher-order_function&quot;&gt;higher order function&lt;/a&gt; called &lt;code&gt;walk-directory&lt;/code&gt; which allows you to execute a function on every file in a directory tree. Using this, combined with the &lt;code&gt;copy-file&lt;/code&gt; function I created a utility function to copy a whole directory easily. I&#039;ll probably fork CL-FAD and propose this function as a feature whenever I muster up enough courage to contribute (or when I have time anyhow). &lt;/p&gt;&lt;p&gt;As I mentioned previously, I wanted to use metadata to help describe blog entries/articles and pages instead of relying on file naming conventions. Given the old Lisp adage of &quot;code is data and data is code&quot;, I decided on using a native Lisp data structure, the property list, to hold the data. The metadata, would be placed as the first line in the file which would be parsed during rendering by the markdown parser. While the &lt;a href=&quot;https://common-lisp.net/project/cl-markdown/docs/user-guide.html&quot;&gt;markdown parser&lt;/a&gt; I chose provides a way to extend it&#039;s capabilities, I couldn&#039;t find a way to reliably pass back data along with what was rendered. As such I had to parse the metadata first, then write an extention to ignore the line containing the metadata. Without it the parser would output a blank paragraph and cause weird formatting issues. &lt;/p&gt;&lt;p&gt;One thing I would like to improve is how the &lt;code&gt;render-blog&lt;/code&gt; function determines what to render and what to leave alone. As a user create more and more blog posts it would be nice to determine which files have been updated and just re-render those. Keeping a list of rendered entries and when they were last rendered is easy enough given all I would have to do is have the &lt;code&gt;print&lt;/code&gt; function write the article metadata to a file, but having a consistent, cross platform way of accessing the modification date on a file may prove to be a bit more difficult. From the small amount of research I did, I only found a way to access unix file metadata in SBCL. &lt;/p&gt;&lt;p&gt;Overall I am happy with how the project turned out and will be adding to the code base as time goes on. &lt;/p&gt;</description>
      <pubDate>Wed, 10 Dec 2014 00:00:00 GMT</pubDate>
      <category>common lisp</category>
    </item>
    
    <item>
      <title>The Penguin, the Wizard, and the Server Rack</title>
      <link>http://blog.optimisedbogosort.com/articles/the_penguin_the_wizard_and_the_server_rack.html</link>
      <description> &lt;p&gt;I remember it like it was yesterday. It was the fall semester of my senior year in high school. I was eating lunch next to the physics classroom I had coming, when my friend approached me excitedly half walking, half running. &lt;/p&gt;&lt;p&gt;&quot;Dude, we have got to go to Mr. Daniels&#039; classroom&quot; my friend began with a large grin on his face. My friend was part of the newly reformed school computing club. Apparently, he had caught wind that the library had received a new set of computers, and that they were donating the old computers to the computer club. Mildly interested, and with nothing better to do, I picked up my stuff and joined my friend on his trek to Mr. Daniels&#039; class. &lt;/p&gt;&lt;p&gt;I was greeted with a large bustle of activity as soon as I entered the class room. I gave a weak &quot;hello&quot; to the few people I knew, as I witnessed students flitting about, rearranging tables to create a sort of clearing in one corner of the classroom. Another, larger group of students formed a circle surrounding a loosely organized pile of computer towers, monitors, and boxes of miscellaneous peripherials and wires. As my friend and I approached the group of students surrounding the heap of computer parts I caught bits of an conversation started long before I arrived. &lt;/p&gt;&lt;p&gt;&quot;Lets just install ubuntu on them, it&#039;s newbie friendly, has a nice GUI right off the bat, and the install process requires very little configuration. Also it doesn&#039;t have a root account, just sudo, so no one can screw anything up that badly.&quot; one student proclaimed behind his laptop, sitting at a desk opposite where I was standing. Others nodded silently in agreement, and with that huddle broke apart, and the students began to set up the computers on the recently rearranged desks. The student who had his laptop, closed it, then got up started distributing out what looked to be CD sleeves with a a circle of people on them. &lt;/p&gt;&lt;p&gt;&quot;Oobuntoo?&quot;, &quot;gooey?&quot;, &quot;root?&quot;, &quot;psuedo?&quot; was I in the young computing and technology society or a botany club? Their talk was all greek to me. This must&#039;ve been readily apparent when I met his excitement with a confusion written all over my face. &quot;We&#039;re holding a Linux install fest&quot;, my friend explained, &quot;Come on I&#039;ll introduce you to the club president&quot;. My friend and I approached the person distributing the CD sleeves and introduced me to him. The club president greeted with me a friendly smile and said &quot;always good to have new blood in the club, are you familiar with Linux at all?&quot; Now, before today I had only a passing familiarity with Linux. I had first heard about it soon after my family purchased our first computer some time in &#039;93. My dad had shown me a page in the newspaper about some guy in Finland releasing a free operating system looking to compete with Windows (the Times article was a little misinformed). Not understanding much about computers, at the time, aside from the fact you could use it to type up school reports and occasionally play video games on it, I wasn&#039;t all too enthusiastic when I poured over the article with my father. A few years later however, I was interested in programming and computer networking and heard Linux was a good operating system to use for such purposes. I tried to obtain Slackware via &quot;Zip Slack&quot;, which was essentially Slackware split across 10 or 11 floppy disks. Downloading that much data on a 28.8k modem however, proved to be an exercise in frustration, so I settled on using a distribution called &lt;a href=&quot;http://www.floppix.com/&quot;&gt;&quot;floppix&quot;&lt;/a&gt;, which was Debian modified to fit on just two floppy disks, quite the feat! Unfortunately, I didn&#039;t get very far as I couldn&#039;t figure out how to configure the modem. &lt;/p&gt;&lt;p&gt;I recounted my previous dealings with Linux to which my friend responded with a chuckle and told me that things have changed and getting into Linux has never been easier. Ubuntu, it seems, was a fairly new Linux distribution aimed at lowering the bar of entry; easing the learning curve in order to get more people using Linux on the desktop. The club president then handed me a CD sleeve and told me to take it. My friend then explained to me that there were two cds there, one labeled &quot;live&quot; so I could try it out with committing to anything and another labeled &quot;install&quot; if I decided to install it. &lt;/p&gt;&lt;p&gt;I was amazed and mystified from the moment I booted up. An operating system, much like windows, and all for free. There were so many new things to explore and I had access to so much of the system, down to the source code that it&#039;s made of. Not wanting to deal with dual booting, I decided to quit Windows cold turkey, and just do a full install on my system. Luckily, my family had recently got broadband internet, so I didn&#039;t have to deal with configuring a modem, or trying to figure out how to get it to dial out to AOL, MSN or some other awful dial up service. The next day, I told my friend and the computer club president I had installed Linux, to which the club president said &quot;Welcome to the club&quot; then handed me an O&#039;reilly book about Bash, and gave me a few pointers about where to start out. &lt;/p&gt;&lt;p&gt;From that point on I quickly learned a lot about Linux, and computing in general. There&#039;s something about Linux, and the open source community in general that seems to breed an unnatural enthusiasm about technology. I remember picking things up very quickly. I remember trying out different window managers, and soon enough, received an old Pentium III Dell computer from my cousin, and started trying out different distros, even different variations of Unix (mainly BSD). I was pretty active in the Ubuntu community, mainly on IRC, and &lt;a href=&quot;http://ubuntuforums.org/showthread.php?t=103806&quot;&gt;ocassionally on the forums&lt;/a&gt;. I even tried my hand at learning to program with C++, before putting that aside and learning Perl instead. &lt;/p&gt;&lt;p&gt;I owe a lot to my friends in the computer club, and the open source and Linux community as a whole. It sparked an enthusiasm in me that I had not previously experienced, and even helped me decide on my college major. Come next year in October, I will have used Linux as my primary operating systems for a decade. Since then I have settled to using Arch Linux on the desktop, Debian and Ubuntu on the servers I manage, and learned a great number of programming languages. I really wouldn&#039;t be where I am today without them. &lt;/p&gt;&lt;p&gt;This blog is sort of a testament to that, how far I&#039;ve come, and how much farther I need to go. I&#039;m not really one to debate about software politics, so I don&#039;t expect to be doing a lot of ranting (if ever). I do, however, like to talk about the various projects I&#039;m working on, or ideas I have. Thus, this blog will primarily be about that, one off snippets of code, prototypes, and hopefully more than occasionally, something much more ambitious. I may also write do a few how tos, or quick bits talking about solutions to problems I encounter every now and then. I&#039;m not sure if all of my entries will this &quot;prose-y&quot;, or this long, but I guess only time will tell. You can find me &lt;a href=&quot;http://www.optimisedbogosort.com&quot;&gt;elsewhere on the web&lt;/a&gt;. However, you can expect to find a majority of my activity here or on github. With that, I welcome you to my little homely hobbit hole on the internet. Don&#039;t mind the stain on the rug (it really holds the place together so I couldn&#039;t just toss it), and enjoy your stay. &lt;/p&gt;</description>
      <pubDate>Mon, 10 Nov 2014 00:00:00 GMT</pubDate>
      <category>misc</category>
    </item>
    
  </channel>
</rss>
